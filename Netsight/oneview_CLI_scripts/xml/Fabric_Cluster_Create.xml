<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Fabric Cluster Create">
    <version>0</version>
    <comments>configure cluster (vIST) between 2 BEBs (VOSS)</comments>
    <content>'''
Python Scripts provided by Extreme Networks.

This script is provided free of charge by Extreme.  We hope such scripts are
helpful when used in conjunction with Extreme products and technology;
however, scripts are provided simply as an accommodation and are not
supported nor maintained by Extreme.  ANY SCRIPTS PROVIDED BY EXTREME ARE
HEREBY PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL EXTREME OR ITS
THIRD PARTY LICENSORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE USE OR DISTRIBUTION OF SUCH SCRIPTS.

This script creates a VSP cluster (SMLT) with vIST.
'''

#@MetaDataStart
#@DetailDescriptionStart
######################################################################################
# 
# This script creates a VSP cluster (SMLT) with vIST.
# 
#######################################################################################
#@DetailDescriptionEnd

#@VariableFieldLabel (description = "vIST VLAN Id <1 - 4094>",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "vist",
#                     value = "4000"
#                     )

#@VariableFieldLabel (description = "vIST Service Id <1 - 16000000>",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "visid",
#                     value = "10004000"
#                     )

#@VariableFieldLabel (description = "vIST Local IP",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "localip",
#                     value = "10.1.1.1/30"
#                     )

#@VariableFieldLabel (description = "vIST Peer IP",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "peerip",
#                     value = "10.1.1.2"
#                     )

#@VariableFieldLabel (description = "SMLT Virtual BMAC",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "vbmac",
#                     value = "02:51:00:79:58:81"
#                     )

#@VariableFieldLabel (description = "SMLT Peer System Id",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "peersysid",
#                     value = "0051.00d2.8084"
#                     )

#@VariableFieldLabel (description = "SMLT LACP",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "lacp",
#                     value = "no"
#                     )
#@MetaDataEnd

SPBMID = "1"


def getOutputOnly(inputStrings):
    try:
        version = ''.join(emc_vars["serverVersion"].split('.')[:3])
        pivotVersion = ''.join("8.1.1".split('.'))
        if int(version) > int(pivotVersion):
            lines = inputStrings.splitlines()[1:]
        else:
            lines = inputStrings.splitlines()[1:-1]
        return '\n'.join(lines)
    except:
        return None
    
def sendConfigCmds(cmds):
    for cmd in cmds:
        cli_results = emc_cli.send(cmd)
        if cli_results.isSuccess() is False:
            print cli_results.getError()
            return None
    return True

def getVidVsn(inputString):
    myList = []
    lines = inputString.splitlines()[6:-2]
    
    for line in lines:
        vid_dict = {}
        parts = line.split()
        if len(parts) > 1:
            vid_dict["vid"] = parts[0]
            vid_dict["isid"] = parts[-1]
        else:
            vid_dict["vid"] = parts[0]

        myList.append(vid_dict) 
        
    return myList

def checkVlanNsi(vid, nsi):
    cli_results = emc_cli.send('show vlan i-sid')
    if cli_results.isSuccess() is False:
        print cli_results.getError()
        return None
    cli_output = cli_results.getOutput()
    cli_output = getOutputOnly(cli_output)
    
    myList = getVidVsn(cli_output)
        
    for row in myList:
        if row.get("vid") == vid:
            return None
        if row.get("isid") == nsi:
            return None
 
    return True

def isISISenable():
    emc_cli.send('terminal more disable')
    cli_results = emc_cli.send('show isis')
    emc_cli.send('terminal more enable')
    if cli_results.isSuccess() is False:
        print cli_results.getError()
        return None
    cli_output = cli_results.getOutput()
    cli_output = getOutputOnly(cli_output)
    
    line = cli_output.splitlines()[4:5]
    entry = line[0].split(': ')
    entry[1] = entry[1].replace(" ","")
    if entry[1] == "enabled":
        return True
        
    return False

def checkSysId():
    cli_results = emc_cli.send('show isis system-id')
    if cli_results.isSuccess() is False:
        print cli_results.getError()
        return None
    cli_output = cli_results.getOutput()
    cli_output = getOutputOnly(cli_output)
    
    line = cli_output.splitlines()[6:]
    entry = line[0].split()
    if entry[0] == emc_vars["peersysid"]:
        return False
        
    return True
    
def main():
    routerISIS = False

    family = emc_vars["family"]
    if family != "VSP Series":
        print "Error: This script needs to be run on a VSP switch"
        return

    if int(emc_vars["vist"]) > 4094 or int(emc_vars["vist"]) < 2:
        print "Error: The VLAN Id is out of range"
        return
    if int(emc_vars["visid"]) > 16000000 or int(emc_vars["visid"]) < 1:
        print "Error: The Service Id is out of range"
        return
    if len(emc_vars["vbmac"].split(':')) != 6:
        print "Error: The virtual BMac is not valid. It must be in the form of aa:bb:cc:dd:ee:ff"
        return
    if '/' not in emc_vars["localip"]:
        print "Error: The vIST Local IP must have a netmask defined in the form /xx"
        return
    
    if '/' in emc_vars["peerip"]:
        s = emc_vars["peerip"].split('/')
        if len(s.split('.')) != 4:
            print "Error: The Peer IP address is invalid"
            return
        emc_vars["peerip"] = s[0]

    if checkSysId() is False:
        print "Error: The Peer System-Id cannot be the same than the local System-Id"
        return
        
    if checkVlanNsi(emc_vars["vist"], emc_vars["visid"]) is None:
        print "Error: The Vlan Id or Service Id for the vIST vlan already exists"
        return
    
    cmds = ["enable", "configure terminal"]
    
    if isISISenable():
        cmds.append("no router isis enable")
        routerISIS = True
    
    cmds.append("router isis")
    cmds.append("spbm {} smlt-virtual-bmac {}".format(SPBMID, emc_vars["vbmac"]))
    cmds.append("spbm {} smlt-peer-system-id {}".format(SPBMID, emc_vars["peersysid"]))
    cmds.append("exit")
    
    cmds.append("vlan create {} name vIST type port-mstprstp 0".format(emc_vars["vist"]))
    cmds.append("vlan i-sid {} {}".format(emc_vars["vist"], emc_vars["visid"]))
    cmds.append("interface vlan {}".format(emc_vars["vist"]))
    cmds.append("ip address {}".format(emc_vars["localip"]))
    cmds.append("exit")
    cmds.append("virtual-ist peer-ip {} vlan {}".format(emc_vars["peerip"], emc_vars["vist"]))
    
    if emc_vars["lacp"] == "yes":
        cmds.append("lacp smlt-sys-id {}".format(emc_vars["vbmac"]))
        cmds.append("lacp enable")
    
    if routerISIS:
        cmds.append("router isis enable")
    
    result = sendConfigCmds(cmds)
    if result is None:
        return
        
        
main()</content>
    <creator>root</creator>
    <supprotedGroups></supprotedGroups>
    <auditLogEnabled></auditLogEnabled>
    <saveConfigOnExit>true</saveConfigOnExit>
    <devicesRequired>true</devicesRequired>
    <scriptTimeout>60</scriptTimeout>
    <defaultCategory></defaultCategory>
    <scriptOwner></scriptOwner>
    <rollbackScript></rollbackScript>
    <postprocessScript></postprocessScript>
    <miscXMLData></miscXMLData>
    <creationDate>1523453667032</creationDate>
    <category>,Extreme Fabric Connect,</category>
    <vendor></vendor>
    <scriptType>Python</scriptType>
    <roles>,NetSight Administrator,</roles>
    <lastUpdatedBy>root</lastUpdatedBy>
    <lastUpdateDate>1523455009759</lastUpdateDate>
    <contexts>,Device,Groups,</contexts>
</script>

